description = ''
group = 'com.esyfur'
version = '0.0.1'

defaultTasks 'clean', 'run'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'com.esyfur', name: 'gradle-expand-props', version: project.ext.get('plugin.propsUtil.version')
        classpath group: 'ws.antonov.gradle.plugins', name: 'gradle-plugin-protobuf', version: '0.8'
    }
}

apply plugin: 'scala'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'idea'
//apply plugin: 'protobuf'
apply plugin: 'propsUtil'

//mainClassName = [group, project.name, 'test', 'Main'].join('.')
//sourceSets.main.scala.srcDirs += sourceSets.test.scala.srcDirs

apply from: 'project/util.gradle'
apply from: 'project/scala.gradle'

ext {
    protobuf = [
        specFile: new File(sourceSets.main.resources.getSrcDirs().iterator().next(), 'ql2.proto'),
        srcDir: relativePath(sourceSets.main.java.getSrcDirs().iterator().next())
    ]
}

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'org.apache.logging.log4j', name: 'log4j-api',  version: project.ext.log4j.version
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: project.ext.log4j.version

    compile group: 'com.typesafe', name: 'config',                     version: '1.0.0'
    compile group: 'com.typesafe', name: sclArt('scalalogging-log4j'), version: '1.0.1'

    compile group: 'com.google.protobuf', name: 'protobuf-java', version: project.ext.get('google.protobuf.version')

    testCompile group: 'org.scalatest', name: sclArt('scalatest'), version: '1.9.1'

//    protobuf files('src/main/resources/ql2.proto')
}

task protoApiDownload() {
    outputs.file project.ext.protobuf.specFile

    // TODO: In the future Gradle is going to support URLs in the Copy task.
    // from rethinkdb.api.url
    // into project.ext.protobuf.specFile

    doLast {
        ant.get(
            src: rethinkdb.api.url,
            dest: project.ext.protobuf.specFile,
            verbose: true
        )
    }
}

task protoApiCompile(type: Exec) {
    mustRunAfter protoApiDownload

    inputs.file project.ext.protobuf.specFile
    outputs.dir new File(project.ext.protobuf.srcDir, rethinkdb.api.package)

    executable 'protoc'
    args '--java_out=' + project.ext.protobuf.srcDir, relativePath(project.ext.protobuf.specFile)
}

tasks.compileJava.dependsOn protoApiCompile

task test(overwrite: true, dependsOn: testClasses) << {
    ant.taskdef(name: 'scalatest', classname: 'org.scalatest.tools.ScalaTestAntTask', classpath: sourceSets.test.runtimeClasspath.asPath)
    ant.scalatest(runpath: sourceSets.test.output.classesDir, haltonfailure: true, fork: false) {
        reporter(type: 'stderr')
        config(name: 'db.host', value: project.ext.test.db.host)
        config(name: 'db.port', value: project.ext.test.db.port)
        config(name: 'db.name', value: project.ext.test.db.name)
        suite(classname: getSuiteClassName('Driver'))
        suite(classname: getSuiteClassName('Rql'))
        suite(classname: getSuiteClassName('Query'))
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.6'
}

def getSuiteClassName(String specName) {
    [project.group, project.name, 'test', specName + 'Spec'].join('.')
}
